
/*This is a sample script of items needed for account creation and handoff based on the items discussed.  
Scripts need to be hardened and enhanced.  Intent is to ultimatley create a parameterized script that can be automated. 
 */

--prerequisit information needed
--Local admin role name
--Domain/agency IP Address for Network Policies


--RUN IN ORG ADMIN ENABLED ACCOUNT TO DISABLE ORGADMIN IN ACCOUNT
USE ROLE ORGADMIN; 
ALTER ACCOUNT <account_name> SET IS_ORG_ADMIN = FALSE;


USE ROLE ACCOUNTADMIN;

/*****************************************************************************************************************************
CREATE ROLE FOR MONITORING ACCOUNT AND GRANT 
OTI - wants to monitor various aspects of security and usage
*****************************************************************************************************************************/
--Create custom ACCOUNT_MONITOR role
CREATE ROLE IF NOT EXISTS ACCOUNT_MONITOR;

--grant account level privileges
GRANT IMPORTED PRIVILEGES ON DATABASE SNOWFLAKE TO ROLE ACCOUNT_MONITOR;
GRANT CREATE DATABASE ON ACCOUNT  TO ROLE ACCOUNT_MONITOR;
GRANT EXECUTE ALERT ON ACCOUNT TO ROLE ACCOUNT_MONITOR;
GRANT EXECUTE TASK ON ACCOUNT TO ROLE TO ROLE ACCOUNT_MONITOR;
GRANT CREATE  INTEGRATION ON ACCOUNT TO ROLE ACCOUNT_MONITOR;
Grant usage on warehouse <warehouse_name>;

--**********commercial region accounts only
GRANT APPLICATION ROLE SNOWFLAKE.BUDGET_ADMIN TO ROLE ACCOUNT_MONITOR;
GRANT APPLICATION ROLE  SNOWFLAKE.TRUST_CENTER_ADMIN TO ROLE ACCOUNT_MONITOR; 
--**********commercial region accounts only

--grant role to current user accountadmin user 
GRANT ROLE ACCOUNT_MONITOR TO USER <user_name>; 

--create database and schema for account monitor owned objects (alerts, ....) --for oti users
use role ACCOUNT_MONITOR;  --for oti users
CREATE DATABASE <database_name>;
CREATE SCHEMA <schema_name>; 

--create database and schema for common/shared objects  --to be shared with local admin users 
use role ACCOUNT_MONITOR;
CREATE DATABASE ADMIN_UTLITIES;  --admin utilities 
CREATE SCHEMA COMMON_POLICIES;  --
CREATE SCHEMA COMMON_ALERTS;

--CREATE OTI NETWORK POLICY TO ALLOW OTI ACCOUNT ADMINS ACCESSS TO ACCOUNT
--APPLY POLICY TO OTI ADMIN BREAK GLASS USERS
USE DATABASE ADMIN_UTLITIES ;  --admin utilities 
USE SCHEMA COMMON_POLICIES;  -- 
    

/*****************************************************************************************************************************
CREATE POLICIES
*****************************************************************************************************************************/
--CREATE OTI NETWORK POLICY TO ALLOW OTI ACCOUNT ADMINS ACCESSS TO ACCOUNT
--APPLY POLICY TO OTI ADMIN BREAK GLASS USERS
USE DATABASE <database_name> ;  --admin utilities 
USE SCHEMA <schema_name>;  -- 

CREATE NETWORK POLICY OTI_NETWORK_POLICY --APPROPRIATE IPADDRESSES FROM OTI  
    ALLOWED_IP_LIST=('11.111.111.111','2.22.222.222', '33.333.333.33'); ---***APPROPRIATE IP ADDRESSES FROM AGENCY DOMAIN AND OTI 
--**TO DO -- apply this network policy to OTI admin users

    
USE DATABASE ADMIN_UTLITIES;  --admin utilities 
USE SCHEMA COMMON_POLICIES;  --

--ACCOUNT NETWORK POLICY 
--OTI wants to allow access to snowflake only from devices on the city network 
--https://docs.snowflake.com/en/user-guide/network-policies
CREATE NETWORK POLICY ACCOUNT_NETWORK_POLICY ---***APPROPRIATE IP ADDRESSES FROM AGENCY DOMAIN 
    ALLOWED_IP_LIST=('11.111.111.111','2.22.222.222', '33.333.333.33');

--PASSWORD POLICY
--BEST PRACTICE - CIS Benchmark 
--https://docs.snowflake.com/en/user-guide/admin-user-management#password-policies
CREATE OR REPLACE PASSWORD POLICY GENERAL_PASSWORD_POLICY
    PASSWORD_MIN_LENGTH = 15  
    PASSWORD_MAX_LENGTH = 24  
    PASSWORD_MIN_UPPER_CASE_CHARS = 1  
    PASSWORD_MIN_LOWER_CASE_CHARS = 1  
    PASSWORD_MIN_NUMERIC_CHARS = 1  
    PASSWORD_MIN_SPECIAL_CHARS = 1  
    PASSWORD_MIN_AGE_DAYS = 1  --update to meet agreed upon standards 
    PASSWORD_MAX_AGE_DAYS = 999  --update to meet agreed upon standards 
    PASSWORD_MAX_RETRIES = 3  --update to meet agreed upon standards 
    PASSWORD_LOCKOUT_TIME_MINS = 30  --update to meet agreed upon standards 
    PASSWORD_HISTORY = 5  --update to meet agreed upon standards 
    COMMENT = 'general password policy';

--AUTHENTICATION POLICIES
--https://docs.snowflake.com/en/user-guide/authentication-policies
--BEST PRACTICE - CIS Benchmark 
--SIGN ON VIA SAML - CAN BE OVERRIDDEN BY POLICY SET AT THE USER LEVEL 
CREATE OR REPLACE AUTHENTICATION POLICY saml_policy
  CLIENT_TYPES = ('ALL')
  AUTHENTICATION_METHODS =  ('SAML')
  COMMENT = 'Allows access thru saml'; 

--KEY PAIR AUTHENTICATION  --for service account access that supports it
 CREATE OR REPLACE AUTHENTICATION POLICY key_pair_policy
  CLIENT_TYPES = ('ALL')
  AUTHENTICATION_METHODS =  ('KEYPAIR')
  COMMENT = 'Allows access thru private public key';

--MFA ENFORCEMENT EXAMPLE --apply at user level to allow signing in with username and password 
CREATE OR REPLACE AUTHENTICATION POLICY mfa_enforcement_policy
MFA_ENROLLMENT = REQUIRED
MFA_AUTHENTICATION_METHODS = ('PASSWORD');

--MFA NOT REQUIRED - FOR USE BY SERVICE ACCOUNTS THAT MUST AUTHENTICATE WITH A PASSWORD - USE SPARINGLY!!! 
CREATE OR REPLACE AUTHENTICATION POLICY mfa_optional_policy
MFA_ENROLLMENT = OPTIONAL
MFA_AUTHENTICATION_METHODS = ('PASSWORD');

--oauth AUTHENTICATION  --for service account access that supports it
CREATE OR REPLACE AUTHENTICATION POLICY oauth_policy
  CLIENT_TYPES = ('ALL')
  AUTHENTICATION_METHODS =  ('OAUTH')
  COMMENT = 'Allows access thru private public key';


/*****************************************************************************************************************************
SET ACCOUNT PARAMTERS 
*****************************************************************************************************************************/
USE ROLE ACCOUNTADMIN; 
-- DATA RETENTION DEFAULTS
ALTER ACCOUNT SET DATA_RETENTION_TIME_IN_DAYS = 1; --update
ALTER ACCOUNT SET MIN_DATA_RETENTION_TIME_IN_DAYS = 1;  --update

--EXTERANL STAGE SECURITY OPTIONS
ALTER ACCOUNT SET PREVENT_UNLOAD_TO_INLINE_URL = TRUE;  --recommended default
ALTER ACCOUNT SET REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION = TRUE; --recommended default
ALTER ACCOUNT SET PREVENT_UNLOAD_TO_INTERNAL_STAGES = TRUE; --recommended default
ALTER ACCOUNT SET PREVENT_UNLOAD_TO_INLINE_URL = TRUE; --recommended default

--YEARLY RE-KEYING  --recommended 
--opt out of image repository in rekeying - open support ticket to ask about error
ALTER ACCOUNT SET ENABLE_TRI_SECRET_AND_REKEY_OPT_OUT_FOR_IMAGE_REPOSITORY = TRUE;
ALTER ACCOUNT SET PERIODIC_DATA_REKEYING=TRUE;

--WE CAN CREATE SELF-SERVICE PROCS THAT ALLOW LOCAL ADMINS TO APPLY THESE POLICIES ONCE THEY MEET COMPLIANCE BEFORE GOING TO PRODUCTION
ALTER ACCOUNT SET AUTHENTICATION POLICY saml_policy; --SET SAML POLICY ONCE SSO HAS BEEN CONFIGURED
ALTER ACCOUNT SET NETWORK_POLICY = <network_policy_name>;


/******************************************************************************************************************************
GRANT LOCAL ADMIN PRIVILEGES 
******************************************************************************************************************************/
USE ROLE ACCOUNTADMIN;
SET ROLE_NM = 'LOCAL_ADMIN'; ------UPDATE to local admin role name 

CREATE ROLE IF NOT EXISTS IDENTIFIER($ROLE_NM);

GRANT 	APPLY AGGREGATION POLICY ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	APPLY AUTHENTICATION POLICY	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	APPLY MASKING POLICY	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
--GRANT 	APPLY PASSWORD POLICY	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	APPLY ROW ACCESS POLICY	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	APPLY SESSION POLICY	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	APPLY PACKAGES POLICY	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	APPLY PROJECTION POLICY	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	APPLY TAG	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	ATTACH POLICY	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	AUDIT	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
--GRANT 	BIND SERVICE ENDPOINT	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	CANCEL QUERY	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	CREATE COMPUTE POOL	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
--GRANT 	CREATE ACCOUNT	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	CREATE API INTEGRATION	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	CREATE APPLICATION	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	CREATE APPLICATION PACKAGE	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
--GRANT 	CREATE DATA EXCHANGE LISTING	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	CREATE DATABASE	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	CREATE EXTERNAL VOLUME	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
--GRANT 	CREATE FAILOVER GROUP	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	CREATE INTEGRATION	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
--GRANT 	CREATE NETWORK POLICY	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
--GRANT 	CREATE REPLICATION GROUP	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	CREATE ROLE	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
--GRANT 	CREATE SHARE	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	CREATE USER	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);   ---MONITOR FOR POLICY COMPLIANCE - FUTURE - CREATE SELF-SERVICE PROC THAT ALLOWS KEY PAIR AUTH ONLY
GRANT 	CREATE WAREHOUSE	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	EXECUTE ALERT	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	EXECUTE MANAGED ALERT	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	EXECUTE MANAGED TASK	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	EXECUTE TASK	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	IMPORT SHARE	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	MANAGE ACCOUNT SUPPORT CASES	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
--GRANT 	MANAGE GRANTS	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	MANAGE USER SUPPORT CASES	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	MANAGE WAREHOUSES	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	MODIFY LOG LEVEL	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	MODIFY SESSION LOG LEVEL	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	MODIFY SESSION TRACE LEVEL	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	MODIFY TRACE LEVEL	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	MONITOR	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	MONITOR EXECUTION	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
--GRANT 	MONITOR SECURITY	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	MONITOR USAGE	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	OVERRIDE SHARE RESTRICTIONS	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	PURCHASE DATA EXCHANGE LISTING	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT 	RESOLVE ALL	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
GRANT IMPORTED PRIVILEGES ON DATABASE SNOWFLAKE TO ROLE IDENTIFIER($ROLE_NM);


--Commercial Accounts only (for now) -- Grant budget and trust center viewing privileges to the NEWACCOUNT-ADMIN role
GRANT APPLICATION ROLE SNOWFLAKE.BUDGET_ADMIN TO ROLE IDENTIFIER($ROLE_NM);
GRANT APPLICATION ROLE SNOWFLAKE.TRUST_CENTER_ADMIN TO ROLE IDENTIFIER($ROLE_NM);


GRANT USAGE ON DATABASE ADMIN_UTLITIES TO ROLE IDENTIFIER($ROLE_NM);  --admin utilities 
GRANT USAGE ON SCHEMA COMMON_POLICIES TO ROLE IDENTIFIER($ROLE_NM);  --



--ORG ADMIN --GRANT 	MANAGE LISTING AUTO FULFILLMENT	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
--GRANT 	CREATE READER ACCOUNT	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
--GRANT 	EXECUTE AUTO CLASSIFICATION	 ON ACCOUNT TO ROLE IDENTIFIER($ROLE_NM);
