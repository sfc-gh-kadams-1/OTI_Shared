WITH HIERARCHY AS 
        (SELECT NAME AS ROLE_NAME, 
            GRANTEE_NAME AS PARENT_NAME  ,
            1 AS LEVEL,
            ARRAY_CONSTRUCT(PARENT_NAME) PATH,
            NAME AS BOTTOM_ROLE,
          FROM SNOWFLAKE.ACCOUNT_USAGE.GRANTS_TO_ROLES
          WHERE GRANTED_ON = 'ROLE' AND PRIVILEGE = 'USAGE'
          AND DELETED_ON IS NULL
          AND NAME IN('SECURITYADMIN','ACCOUNTADMIN')  --ADD RESTRICTED ROLES AS DESIRED
          UNION ALL 
          SELECT 
                  PC.NAME ,PC.GRANTEE_NAME ,
                  H.LEVEL+1 LEVEL ,
                  ARRAY_CAT(H.PATH, ARRAY_CONSTRUCT(PC.GRANTEE_NAME)) PATH,
                  H.BOTTOM_ROLE
          FROM SNOWFLAKE.ACCOUNT_USAGE.GRANTS_TO_ROLES PC
          JOIN HIERARCHY H
          ON H.PARENT_NAME = PC.NAME
          WHERE NOT ARRAY_CONTAINS(PC.GRANTEE_NAME::VARIANT ,H.PATH)  --ELIMINATE CIRCULAR REFERENCES
          AND GRANTED_ON = 'ROLE' 
          AND GRANTED_TO = 'ROLE' 
          AND PRIVILEGE = 'USAGE'
          AND DELETED_ON IS NULL) 
SELECT BOTTOM_ROLE AS ELEVATED_ROLE, BOTTOM_ROLE||' > '||ARRAY_TO_STRING( H.PATH , ' > ' ) AS ROLE_PATH, H.PATH AS PATH_ARRAY, X.VALUE::VARCHAR AS ROLE_NAME, CURRENT_TIMESTAMP()
FROM HIERARCHY H, LATERAL FLATTEN(H.PATH) X;


WITH MG_HIERARCHY AS 
        (SELECT NAME AS ROLE_NAME, 
            GRANTEE_NAME AS PARENT_NAME  ,
            1 AS LEVEL,
            ARRAY_CONSTRUCT(PARENT_NAME) PATH,
            NAME AS BOTTOM_ROLE,
            PRIVILEGE
          FROM SNOWFLAKE.ACCOUNT_USAGE.GRANTS_TO_ROLES
          WHERE GRANTED_ON = 'ACCOUNT' AND PRIVILEGE = 'MANAGE GRANTS'
          AND DELETED_ON IS NULL
          AND GRANTEE_NAME NOT IN('SECURITYADMIN','ACCOUNTADMIN')  --ADD RESTRICTED ROLES AS DESIRED
          
          UNION ALL 
          SELECT 
                  PC.NAME ,PC.GRANTEE_NAME ,
                  H.LEVEL+1 LEVEL ,
                  ARRAY_CAT(H.PATH, ARRAY_CONSTRUCT(PC.GRANTEE_NAME)) PATH,
                  H.BOTTOM_ROLE,
                  H.PRIVILEGE
          FROM SNOWFLAKE.ACCOUNT_USAGE.GRANTS_TO_ROLES PC
          JOIN MG_HIERARCHY H
          ON H.PARENT_NAME = PC.NAME
          WHERE NOT ARRAY_CONTAINS(PC.GRANTEE_NAME::VARIANT ,H.PATH)  --ELIMINATE CIRCULAR REFERENCES
          AND GRANTED_ON = 'ROLE' 
          AND GRANTED_TO = 'ROLE' 
          AND PC.PRIVILEGE = 'USAGE'
          AND DELETED_ON IS NULL) 
SELECT BOTTOM_ROLE AS ELEVATED_ROLE, BOTTOM_ROLE||' > '||ARRAY_TO_STRING( H.PATH , ' > ' ) AS ROLE_PATH, H.PATH AS PATH_ARRAY, X.VALUE::VARCHAR AS ROLE_NAME, H.PRIVILEGE, CURRENT_TIMESTAMP()
FROM MG_HIERARCHY H, LATERAL FLATTEN(H.PATH) X;


